// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoukatSons.Data;

#nullable disable

namespace ShoukatSons.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250824091942_ChangeProductIdToInt")]
    partial class ChangeProductIdToInt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("ShoukatSons.Data.Entities.AuditLog", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DataAfter")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataBefore")
                        .HasColumnType("TEXT");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PerformedByUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuditId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Counter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Counters");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ExchangeGroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.DocumentLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LineDiscount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ProductId");

                    b.ToTable("DocumentLine");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Exchange", b =>
                {
                    b.Property<int>("ExchangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Difference")
                        .HasColumnType("REAL");

                    b.Property<int>("NewSaleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OriginalSaleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReturnId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExchangeId");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("QuantityOnHand")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ReorderLevel")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Method")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PaidAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("SaleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("SaleId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Brand")
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDiscontinued")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LowStockThreshold")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StockQuantity")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Return", b =>
                {
                    b.Property<int>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExchangeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RelatedSaleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalRefund")
                        .HasColumnType("REAL");

                    b.HasKey("ReturnId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.ReturnLine", b =>
                {
                    b.Property<int>("ReturnLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReturnId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitRefundPrice")
                        .HasColumnType("REAL");

                    b.HasKey("ReturnLineId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReturnId");

                    b.ToTable("ReturnLines");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("BillDiscountAmount")
                        .HasColumnType("REAL");

                    b.Property<decimal?>("BillDiscountPercent")
                        .HasColumnType("REAL");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ExchangeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("REAL");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ItemDiscountTotal")
                        .HasColumnType("REAL");

                    b.Property<decimal>("PaidTotal")
                        .HasColumnType("REAL");

                    b.Property<string>("Remarks")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("REAL");

                    b.HasKey("SaleId");

                    b.HasIndex("InvoiceNo")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.SaleLine", b =>
                {
                    b.Property<int>("SaleLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ApprovedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LineDiscount")
                        .HasColumnType("REAL");

                    b.Property<string>("PriceOverrideReason")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SaleId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitListPrice")
                        .HasColumnType("REAL");

                    b.Property<decimal>("UnitSoldPrice")
                        .HasColumnType("REAL");

                    b.HasKey("SaleLineId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleLines");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.StockAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AlertedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DismissedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("StockAlerts");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.StockTxn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("QuantityChange")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reference")
                        .HasColumnType("TEXT");

                    b.Property<int>("TxnType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("StockTxns");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.StockTxnLine", b =>
                {
                    b.Property<int>("StockTxnLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockTxnId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("StockTxnId1")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("REAL");

                    b.HasKey("StockTxnLineId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockTxnId1");

                    b.ToTable("StockTxnLines");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PinHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.DocumentLine", b =>
                {
                    b.HasOne("ShoukatSons.Data.Entities.Document", "Document")
                        .WithMany("Lines")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoukatSons.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Inventory", b =>
                {
                    b.HasOne("ShoukatSons.Data.Entities.Product", "Product")
                        .WithOne()
                        .HasForeignKey("ShoukatSons.Data.Entities.Inventory", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Payment", b =>
                {
                    b.HasOne("ShoukatSons.Data.Entities.Document", "Document")
                        .WithMany("Payments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoukatSons.Data.Entities.Sale", null)
                        .WithMany("Payments")
                        .HasForeignKey("SaleId");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Product", b =>
                {
                    b.HasOne("ShoukatSons.Data.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.ReturnLine", b =>
                {
                    b.HasOne("ShoukatSons.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoukatSons.Data.Entities.Return", "Return")
                        .WithMany("Lines")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.SaleLine", b =>
                {
                    b.HasOne("ShoukatSons.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoukatSons.Data.Entities.Sale", "Sale")
                        .WithMany("Lines")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.StockAlert", b =>
                {
                    b.HasOne("ShoukatSons.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.StockTxn", b =>
                {
                    b.HasOne("ShoukatSons.Data.Entities.Product", "Product")
                        .WithMany("StockTxns")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.StockTxnLine", b =>
                {
                    b.HasOne("ShoukatSons.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoukatSons.Data.Entities.StockTxn", "StockTxn")
                        .WithMany()
                        .HasForeignKey("StockTxnId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockTxn");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Document", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Product", b =>
                {
                    b.Navigation("StockTxns");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Return", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("ShoukatSons.Data.Entities.Sale", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
